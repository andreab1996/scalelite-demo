{"ast":null,"code":"import axios from 'axios';\nimport { FIRST_NAME_CHANGED, FULL_NAME_CHANGED, LAST_NAME_CHANGED, RECEIVE_DATA } from './types';\nexport const firstNameChanged = text => {\n  return {\n    type: FIRST_NAME_CHANGED,\n    payload: text\n  };\n};\nexport const lastNameChanged = text => {\n  return {\n    type: LAST_NAME_CHANGED,\n    payload: text\n  };\n};\nexport const fullNameChanged = text => {\n  return {\n    type: FULL_NAME_CHANGED,\n    payload: text\n  };\n};\nexport const getData = () => {\n  return dispatch => {\n    // const url = 'https://jsonplaceholder.typicode.com/todos';\n    const url = 'https://vcss.etfbl.net/scalelite/api/getServers?checksum=6991bdb9abecaf5f661282a25cb90d40a31fd45f';\n    fetch(url, {\n      mode: 'no-cors',\n      credentials: 'same-origin'\n    }).then(response => {\n      debugger;\n      console.log(response.body);\n      dispatch(receiveData(response.data));\n    }).catch(error => console.log(error));\n  };\n};\nexport const receiveData = data => {\n  return {\n    type: RECEIVE_DATA,\n    payload: data\n  };\n};\n\nasync function postData(url = '', data = {}) {\n  const response = await fetch(url, {\n    method: 'GET',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'no-cors',\n    // no-cors, *cors, same-origin\n    cache: 'no-cache',\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin',\n    // include, *same-origin, omit\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //     // 'Content-Type': 'application/x-www-form-urlencoded',\n    //   },\n    redirect: 'follow',\n    // manual, *follow, error\n    referrerPolicy: 'no-referrer',\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}","map":{"version":3,"sources":["C:/Users/Andrea/Desktop/Master/RacunarskeMreze/Project/client/src/actions/TextInputActions.js"],"names":["axios","FIRST_NAME_CHANGED","FULL_NAME_CHANGED","LAST_NAME_CHANGED","RECEIVE_DATA","firstNameChanged","text","type","payload","lastNameChanged","fullNameChanged","getData","dispatch","url","fetch","mode","credentials","then","response","console","log","body","receiveData","data","catch","error","postData","method","cache","redirect","referrerPolicy","JSON","stringify","json"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,kBADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,YAJJ,QAKO,SALP;AAOA,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACtC,SAAO;AACHC,IAAAA,IAAI,EAAEN,kBADH;AAEHO,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,eAAe,GAAIH,IAAD,IAAU;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,iBADH;AAEHK,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMI,eAAe,GAAIJ,IAAD,IAAU;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAEL,iBADH;AAEHM,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMK,OAAO,GAAG,MAAM;AACzB,SAAQC,QAAD,IAAc;AACjB;AACA,UAAMC,GAAG,GAAG,mGAAZ;AACAC,IAAAA,KAAK,CAACD,GAAD,EAAM;AACPE,MAAAA,IAAI,EAAE,SADC;AAEPC,MAAAA,WAAW,EAAE;AAFN,KAAN,CAAL,CAIKC,IAJL,CAIWC,QAAD,IAAc;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAT,MAAAA,QAAQ,CAACU,WAAW,CAACJ,QAAQ,CAACK,IAAV,CAAZ,CAAR;AACH,KARL,EASKC,KATL,CASYC,KAAD,IAAWN,OAAO,CAACC,GAAR,CAAYK,KAAZ,CATtB;AAUH,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMH,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHhB,IAAAA,IAAI,EAAEH,YADH;AAEHI,IAAAA,OAAO,EAAEe;AAFN,GAAP;AAIH,CALM;;AAOP,eAAeG,QAAf,CAAwBb,GAAG,GAAG,EAA9B,EAAkCU,IAAI,GAAG,EAAzC,EAA6C;AACzC,QAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACD,GAAD,EAAM;AAC9Bc,IAAAA,MAAM,EAAE,KADsB;AACf;AACfZ,IAAAA,IAAI,EAAE,SAFwB;AAEb;AACjBa,IAAAA,KAAK,EAAE,UAHuB;AAGX;AACnBZ,IAAAA,WAAW,EAAE,aAJiB;AAIF;AAC5B;AACA;AACA;AACA;AACAa,IAAAA,QAAQ,EAAE,QAToB;AASV;AACpBC,IAAAA,cAAc,EAAE,aAVc;AAUC;AAC/BT,IAAAA,IAAI,EAAEU,IAAI,CAACC,SAAL,CAAeT,IAAf,CAXwB,CAWH;;AAXG,GAAN,CAA5B;AAaA,SAAOL,QAAQ,CAACe,IAAT,EAAP,CAdyC,CAcjB;AAC3B","sourcesContent":["\r\nimport axios from 'axios';\r\nimport {\r\n    FIRST_NAME_CHANGED,\r\n    FULL_NAME_CHANGED,\r\n    LAST_NAME_CHANGED,\r\n    RECEIVE_DATA\r\n} from './types';\r\n\r\nexport const firstNameChanged = (text) => {\r\n    return {\r\n        type: FIRST_NAME_CHANGED,\r\n        payload: text\r\n    };\r\n};\r\n\r\nexport const lastNameChanged = (text) => {\r\n    return {\r\n        type: LAST_NAME_CHANGED,\r\n        payload: text\r\n    };\r\n};\r\n\r\nexport const fullNameChanged = (text) => {\r\n    return {\r\n        type: FULL_NAME_CHANGED,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const getData = () => {\r\n    return (dispatch) => {\r\n        // const url = 'https://jsonplaceholder.typicode.com/todos';\r\n        const url = 'https://vcss.etfbl.net/scalelite/api/getServers?checksum=6991bdb9abecaf5f661282a25cb90d40a31fd45f';\r\n        fetch(url, {\r\n            mode: 'no-cors',\r\n            credentials: 'same-origin'\r\n        })\r\n            .then((response) => {\r\n                debugger;\r\n                console.log(response.body);\r\n                dispatch(receiveData(response.data))\r\n            })\r\n            .catch((error) => console.log(error))\r\n    }\r\n}\r\n\r\nexport const receiveData = (data) => {\r\n    return {\r\n        type: RECEIVE_DATA,\r\n        payload: data\r\n    }\r\n}\r\n\r\nasync function postData(url = '', data = {}) {\r\n    const response = await fetch(url, {\r\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'no-cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        //   headers: {\r\n        //     'Content-Type': 'application/json'\r\n        //     // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        //   },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n}"]},"metadata":{},"sourceType":"module"}