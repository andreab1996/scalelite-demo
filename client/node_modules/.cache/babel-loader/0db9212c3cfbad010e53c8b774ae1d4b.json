{"ast":null,"code":"'use strict';\n\nconst HttpService = require('./http-service');\n\nconst {\n  constructUrl\n} = require('./util');\n\nclass ScaleliteApi {\n  constructor(baseUrl, secret) {\n    this.secret = secret;\n    this.client = new HttpService(baseUrl);\n  }\n\n  async livenessCheck() {\n    let callUrl = this.constructCall('');\n    return this.client.call(callUrl);\n  }\n\n  async getServers() {\n    let callUrl = this.constructCall('getServers');\n    return this.client.call(callUrl).then(json => {\n      let servers = json.servers ? json.servers.server : [];\n      json.servers = Array.isArray(servers) ? servers : [servers];\n      return json;\n    });\n  }\n\n  async getServerInfo(id) {\n    let callUrl = this.constructCall('getServerInfo', {\n      serverID: id\n    });\n    return this.client.call(callUrl);\n  }\n\n  async addServer(url, secret, loadMultiplier = null) {\n    let callUrl = this.constructCall('addServer', {\n      serverUrl: url,\n      serverSecret: secret,\n      loadMultiplier\n    });\n    return this.client.call(callUrl);\n  }\n\n  async removeServer(id) {\n    let callUrl = this.constructCall('removeServer', {\n      serverID: id\n    });\n    return this.client.call(callUrl);\n  }\n\n  async enableServer(id) {\n    let callUrl = this.constructCall('enableServer', {\n      serverID: id\n    });\n    return this.client.call(callUrl);\n  }\n\n  async disableServer(id) {\n    let callUrl = this.constructCall('disableServer', {\n      serverID: id\n    });\n    return this.client.call(callUrl);\n  }\n\n  async setLoadMultiplier(id, loadMultiplier) {\n    let callUrl = this.constructCall('setLoadMultiplier', {\n      serverID: id,\n      loadMultiplier\n    });\n    return this.client.call(callUrl);\n  }\n\n  constructCall(action, parameters = {}) {\n    return constructUrl(this.secret, action, parameters);\n  }\n\n}\n\nmodule.exports = ScaleliteApi;","map":{"version":3,"sources":["C:/Users/Andrea/Desktop/Master/RacunarskeMreze/Project/node_modules/scalelite-js/src/scalelite-api.js"],"names":["HttpService","require","constructUrl","ScaleliteApi","constructor","baseUrl","secret","client","livenessCheck","callUrl","constructCall","call","getServers","then","json","servers","server","Array","isArray","getServerInfo","id","serverID","addServer","url","loadMultiplier","serverUrl","serverSecret","removeServer","enableServer","disableServer","setLoadMultiplier","action","parameters","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst HttpService = require('./http-service')\nconst { constructUrl } = require('./util')\n\nclass ScaleliteApi {\n  constructor(baseUrl, secret) {\n    this.secret = secret\n    this.client = new HttpService(baseUrl)\n  }\n\n  async livenessCheck() {\n    let callUrl = this.constructCall('')\n    return this.client.call(callUrl)\n  }\n\n  async getServers() {\n    let callUrl = this.constructCall('getServers')\n    return this.client.call(callUrl).then((json) => {\n      let servers = json.servers ? json.servers.server : []\n      json.servers = Array.isArray(servers) ? servers : [servers]\n\n      return json\n    })\n  }\n\n  async getServerInfo(id) {\n    let callUrl = this.constructCall('getServerInfo', { serverID: id })\n    return this.client.call(callUrl)\n  }\n\n  async addServer(url, secret, loadMultiplier = null) {\n    let callUrl = this.constructCall('addServer', {\n      serverUrl: url,\n      serverSecret: secret,\n      loadMultiplier,\n    })\n    return this.client.call(callUrl)\n  }\n\n  async removeServer(id) {\n    let callUrl = this.constructCall('removeServer', { serverID: id })\n    return this.client.call(callUrl)\n  }\n\n  async enableServer(id) {\n    let callUrl = this.constructCall('enableServer', { serverID: id })\n    return this.client.call(callUrl)\n  }\n\n  async disableServer(id) {\n    let callUrl = this.constructCall('disableServer', { serverID: id })\n    return this.client.call(callUrl)\n  }\n\n  async setLoadMultiplier(id, loadMultiplier) {\n    let callUrl = this.constructCall('setLoadMultiplier', {\n      serverID: id,\n      loadMultiplier,\n    })\n    return this.client.call(callUrl)\n  }\n\n  constructCall(action, parameters = {}) {\n    return constructUrl(this.secret, action, parameters)\n  }\n}\n\nmodule.exports = ScaleliteApi\n"]},"metadata":{},"sourceType":"script"}